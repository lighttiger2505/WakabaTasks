// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/wakabata.proto

package wakabatav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lighttiger2505/wakabata/internal/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WakabataServiceName is the fully-qualified name of the WakabataService service.
	WakabataServiceName = "wakabata.v1.WakabataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WakabataServiceWakabataProcedure is the fully-qualified name of the WakabataService's Wakabata
	// RPC.
	WakabataServiceWakabataProcedure = "/wakabata.v1.WakabataService/Wakabata"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	wakabataServiceServiceDescriptor        = v1.File_v1_wakabata_proto.Services().ByName("WakabataService")
	wakabataServiceWakabataMethodDescriptor = wakabataServiceServiceDescriptor.Methods().ByName("Wakabata")
)

// WakabataServiceClient is a client for the wakabata.v1.WakabataService service.
type WakabataServiceClient interface {
	Wakabata(context.Context, *connect.Request[v1.WakabataRequest]) (*connect.Response[v1.WakabataResponse], error)
}

// NewWakabataServiceClient constructs a client for the wakabata.v1.WakabataService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWakabataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WakabataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wakabataServiceClient{
		wakabata: connect.NewClient[v1.WakabataRequest, v1.WakabataResponse](
			httpClient,
			baseURL+WakabataServiceWakabataProcedure,
			connect.WithSchema(wakabataServiceWakabataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// wakabataServiceClient implements WakabataServiceClient.
type wakabataServiceClient struct {
	wakabata *connect.Client[v1.WakabataRequest, v1.WakabataResponse]
}

// Wakabata calls wakabata.v1.WakabataService.Wakabata.
func (c *wakabataServiceClient) Wakabata(ctx context.Context, req *connect.Request[v1.WakabataRequest]) (*connect.Response[v1.WakabataResponse], error) {
	return c.wakabata.CallUnary(ctx, req)
}

// WakabataServiceHandler is an implementation of the wakabata.v1.WakabataService service.
type WakabataServiceHandler interface {
	Wakabata(context.Context, *connect.Request[v1.WakabataRequest]) (*connect.Response[v1.WakabataResponse], error)
}

// NewWakabataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWakabataServiceHandler(svc WakabataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wakabataServiceWakabataHandler := connect.NewUnaryHandler(
		WakabataServiceWakabataProcedure,
		svc.Wakabata,
		connect.WithSchema(wakabataServiceWakabataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wakabata.v1.WakabataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WakabataServiceWakabataProcedure:
			wakabataServiceWakabataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWakabataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWakabataServiceHandler struct{}

func (UnimplementedWakabataServiceHandler) Wakabata(context.Context, *connect.Request[v1.WakabataRequest]) (*connect.Response[v1.WakabataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wakabata.v1.WakabataService.Wakabata is not implemented"))
}
