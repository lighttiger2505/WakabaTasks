// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lighttiger2505/wakabata/internal/domain/model"
)

func newTaskComment(db *gorm.DB, opts ...gen.DOOption) taskComment {
	_taskComment := taskComment{}

	_taskComment.taskCommentDo.UseDB(db, opts...)
	_taskComment.taskCommentDo.UseModel(&model.TaskComment{})

	tableName := _taskComment.taskCommentDo.TableName()
	_taskComment.ALL = field.NewAsterisk(tableName)
	_taskComment.ID = field.NewString(tableName, "id")
	_taskComment.TaskID = field.NewString(tableName, "task_id")
	_taskComment.UserID = field.NewString(tableName, "user_id")
	_taskComment.Comment = field.NewString(tableName, "comment")
	_taskComment.CreatedAt = field.NewTime(tableName, "created_at")
	_taskComment.UpdatedAt = field.NewTime(tableName, "updated_at")

	_taskComment.fillFieldMap()

	return _taskComment
}

type taskComment struct {
	taskCommentDo

	ALL       field.Asterisk
	ID        field.String
	TaskID    field.String
	UserID    field.String
	Comment   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t taskComment) Table(newTableName string) *taskComment {
	t.taskCommentDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskComment) As(alias string) *taskComment {
	t.taskCommentDo.DO = *(t.taskCommentDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskComment) updateTableName(table string) *taskComment {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.TaskID = field.NewString(table, "task_id")
	t.UserID = field.NewString(table, "user_id")
	t.Comment = field.NewString(table, "comment")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *taskComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskComment) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["task_id"] = t.TaskID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["comment"] = t.Comment
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t taskComment) clone(db *gorm.DB) taskComment {
	t.taskCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskComment) replaceDB(db *gorm.DB) taskComment {
	t.taskCommentDo.ReplaceDB(db)
	return t
}

type taskCommentDo struct{ gen.DO }

type ITaskCommentDo interface {
	gen.SubQuery
	Debug() ITaskCommentDo
	WithContext(ctx context.Context) ITaskCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskCommentDo
	WriteDB() ITaskCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskCommentDo
	Not(conds ...gen.Condition) ITaskCommentDo
	Or(conds ...gen.Condition) ITaskCommentDo
	Select(conds ...field.Expr) ITaskCommentDo
	Where(conds ...gen.Condition) ITaskCommentDo
	Order(conds ...field.Expr) ITaskCommentDo
	Distinct(cols ...field.Expr) ITaskCommentDo
	Omit(cols ...field.Expr) ITaskCommentDo
	Join(table schema.Tabler, on ...field.Expr) ITaskCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskCommentDo
	Group(cols ...field.Expr) ITaskCommentDo
	Having(conds ...gen.Condition) ITaskCommentDo
	Limit(limit int) ITaskCommentDo
	Offset(offset int) ITaskCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskCommentDo
	Unscoped() ITaskCommentDo
	Create(values ...*model.TaskComment) error
	CreateInBatches(values []*model.TaskComment, batchSize int) error
	Save(values ...*model.TaskComment) error
	First() (*model.TaskComment, error)
	Take() (*model.TaskComment, error)
	Last() (*model.TaskComment, error)
	Find() ([]*model.TaskComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskComment, err error)
	FindInBatches(result *[]*model.TaskComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskCommentDo
	Assign(attrs ...field.AssignExpr) ITaskCommentDo
	Joins(fields ...field.RelationField) ITaskCommentDo
	Preload(fields ...field.RelationField) ITaskCommentDo
	FirstOrInit() (*model.TaskComment, error)
	FirstOrCreate() (*model.TaskComment, error)
	FindByPage(offset int, limit int) (result []*model.TaskComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.TaskComment, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (t taskCommentDo) FilterWithNameAndRole(name string, role string) (result []model.TaskComment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM task_comments WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t taskCommentDo) Debug() ITaskCommentDo {
	return t.withDO(t.DO.Debug())
}

func (t taskCommentDo) WithContext(ctx context.Context) ITaskCommentDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskCommentDo) ReadDB() ITaskCommentDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskCommentDo) WriteDB() ITaskCommentDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskCommentDo) Session(config *gorm.Session) ITaskCommentDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskCommentDo) Clauses(conds ...clause.Expression) ITaskCommentDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskCommentDo) Returning(value interface{}, columns ...string) ITaskCommentDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskCommentDo) Not(conds ...gen.Condition) ITaskCommentDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskCommentDo) Or(conds ...gen.Condition) ITaskCommentDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskCommentDo) Select(conds ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskCommentDo) Where(conds ...gen.Condition) ITaskCommentDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskCommentDo) Order(conds ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskCommentDo) Distinct(cols ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskCommentDo) Omit(cols ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskCommentDo) Join(table schema.Tabler, on ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskCommentDo) Group(cols ...field.Expr) ITaskCommentDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskCommentDo) Having(conds ...gen.Condition) ITaskCommentDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskCommentDo) Limit(limit int) ITaskCommentDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskCommentDo) Offset(offset int) ITaskCommentDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskCommentDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskCommentDo) Unscoped() ITaskCommentDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskCommentDo) Create(values ...*model.TaskComment) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskCommentDo) CreateInBatches(values []*model.TaskComment, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskCommentDo) Save(values ...*model.TaskComment) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskCommentDo) First() (*model.TaskComment, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskComment), nil
	}
}

func (t taskCommentDo) Take() (*model.TaskComment, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskComment), nil
	}
}

func (t taskCommentDo) Last() (*model.TaskComment, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskComment), nil
	}
}

func (t taskCommentDo) Find() ([]*model.TaskComment, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskComment), err
}

func (t taskCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskComment, err error) {
	buf := make([]*model.TaskComment, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskCommentDo) FindInBatches(result *[]*model.TaskComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskCommentDo) Attrs(attrs ...field.AssignExpr) ITaskCommentDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskCommentDo) Assign(attrs ...field.AssignExpr) ITaskCommentDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskCommentDo) Joins(fields ...field.RelationField) ITaskCommentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskCommentDo) Preload(fields ...field.RelationField) ITaskCommentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskCommentDo) FirstOrInit() (*model.TaskComment, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskComment), nil
	}
}

func (t taskCommentDo) FirstOrCreate() (*model.TaskComment, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskComment), nil
	}
}

func (t taskCommentDo) FindByPage(offset int, limit int) (result []*model.TaskComment, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskCommentDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskCommentDo) Delete(models ...*model.TaskComment) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskCommentDo) withDO(do gen.Dao) *taskCommentDo {
	t.DO = *do.(*gen.DO)
	return t
}
